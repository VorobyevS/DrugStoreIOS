// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;

using Foundation;
using AppKit;

namespace DrugStore
{
	public partial class ViewController : NSViewController
	{
        public List<CatalogueItem> catalogue = new List<CatalogueItem>();

		public ViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            PreferredContentSize = new CoreGraphics.CGSize(679, 453);

            //Запрос из базы данных на получения товаров
            try
            {
                catalogue = SqlClass.GetCollectionCatalogue();
            }
            catch
            {
                (SqlClass.GetError("Не удалось подключиться к БД")).RunModal();
            }

            //Блок инициализации представления коллекции
            CatalogueSource sou = new CatalogueSource(catalogue);
            CatalogTableView.DataSource = sou;
            CatalogTableView.Delegate = new CatalogueDelegate(sou);
            CountField.IntValue = catalogue.Count;

            //кнопка удаления
            DeleteButton.Activated += (sender, e) => 
            {
                if(CatalogTableView.SelectedRow != -1)
                {
                    try
                    {
                        // Запрос в БД на удаление
                        SqlClass.DeleteRow(catalogue[(int)CatalogTableView.SelectedRow]);

                        catalogue.RemoveAt((int)CatalogTableView.SelectedRow);
                        CatalogTableView.ReloadData();
                        CountField.IntValue = catalogue.Count;
                    }
                    catch
                    {
                        (SqlClass.GetError("Не удалось удалить запись из БД")).RunModal();
                    }
                }
            };

        }

        public override void PrepareForSegue(NSStoryboardSegue segue, NSObject sender)
        {
            if(segue.Identifier == "EditSegue")
            {
                var a = segue.DestinationController as EditViewController;
                a.item = catalogue[(int)CatalogTableView.SelectedRow];
                a.addOne += (object sender1, EventArgs e) => 
                {
                    catalogue[(int)CatalogTableView.SelectedRow] = a.item;
                    CatalogTableView.ReloadData();
                };
            }
            else if(segue.Identifier == "AddSegue")
            {
                var a = segue.DestinationController as AddViewController;
                a.addOne += (object sender1, EventArgs e) =>
                {
                    catalogue.Add(a.item);
                    CatalogTableView.ReloadData();
                    CountField.IntValue = catalogue.Count;
                };
            }
        }

        public override bool ShouldPerformSegue(string identifier, NSObject sender)
        {
            bool perform = true;
            switch(identifier)
            {
                case "EditSegue":
                    {
                        if (CatalogTableView.SelectedRow == -1)
                            perform = false;
                        else
                            perform = true;
                    }
                    break;
            }

            return perform;
        }
	}
}
