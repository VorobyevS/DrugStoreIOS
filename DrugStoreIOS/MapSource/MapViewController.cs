// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CoreLocation;
using Microsoft.WindowsAzure.MobileServices;
using UIKit;

namespace DrugStoreIOS
{
    public partial class MapViewController : UIViewController
    {
        private string drugname = "";
        public string Drugname
        {
            get { return drugname; }
            set { drugname = value; }
        }
        private MobileServiceClient MobileService;
        private IMobileServiceTable<Adresses> AdressesTable;
        private List<AnnotationForMap> annots;
        private CLLocationManager cLLocationManager;

		public MapViewController (IntPtr handle) : base (handle)
		{
		}

        public async override void ViewDidLoad()
		{
            MobileService = new MobileServiceClient("https://some.azurewebsites.net");
            AdressesTable = MobileService.GetTable<Adresses>();
            try
            {
                await InitList();
                cLLocationManager = new CLLocationManager();
                cLLocationManager.RequestWhenInUseAuthorization();
                MapView.Delegate = new MapViewDelegeate();
                MapView.AddAnnotations(annots.ToArray());
            }
            catch
            {
                PresentViewController(GetAlertsClass.GetAlert("Проблемы с геолокацией"), true, null);
            }
		}

        private async Task InitList()
        {
            if (drugname.Equals(""))
            {
                var items = await AdressesTable.ToListAsync();
                this.annots = new List<AnnotationForMap>();
                foreach(var item in items)
                    annots.Add(new AnnotationForMap(){ Title = item.Adress, Coordinate = new CLLocationCoordinate2D(item.Xvalue, item.Yvalue), available = true });
            }
            else
            {
                var paramDictionary = new Dictionary<string, string>();
                paramDictionary.Add("DrugName", drugname);
                var items = await MobileService.InvokeApiAsync<List<Adresses>>("JoinForAdresses", System.Net.Http.HttpMethod.Get, paramDictionary);
                this.annots = new List<AnnotationForMap>();
                foreach (var item in items)
                    annots.Add(new AnnotationForMap() { Title = item.Adress, Coordinate = new CLLocationCoordinate2D(item.Xvalue, item.Yvalue), available = item.Available });
            }
        }
	}
}
